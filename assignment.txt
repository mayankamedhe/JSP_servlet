Set up your Servlet/JSP project on Eclipse 

Now you are all set to actually work on your assignment.  For the in-class assignment you have to do the following:

Create a table  
    password(ID varchar(10), password varchar(20)) 
in your database.
Fill sample user ID/password in the table, with ID matching data from the student and instructor tables in the sample University data you already have.
Create an index.html page (using New > HTML page) with some information content (e.g. your roll number and name), and a Login link; the login link  simply refers to the Login servlet below, without passing any form parameters.
Create a Login servlet with a doGet() and doPost() method that allows a user to login with a login/password.
The doGet() method simply calls doPost(request, response)
The doPost() method checks if the parameters ID and password parameters are not null; if either is null, it displays a form to fill in the parameters and invoke the same servlet using doPost(), on submit.  
If both parameters are not null, it checks if the ID/password match with the user table in the database

NOTE: We are storing passwords in plain text.  You should NEVER do this in the real world, instead the system should concatenate the password with random text stored in a “salt” attribute of the password table, compute a hash on on the concatenated test, and store the hash in the user table (when setting password), or compare the hash with the stored value in the user table (when checking the password).
On failed authentication, it displays an error message and displays the form as above..   
On successful authentication of the password, it sets a session variable to store the ID, and displays a home page by redirecting to a Home servlet:  Use response.sendRedirect("Home")   to do this (you may need to add the project name before Home, e.g. Ass5A/Home, if your project is called Ass5a).
Create a Home servlet that displays the following:
The users name and department, which is retrieved based on the ID value stored in the session
If the user is a student, show a link to a servlet displayGrades, which displays the student’s grades for all the courses the student has taken.  It should take the ID from the session, and display the course_id, title, section id, semester, year, and the grade obtained.
a logout button, which links to a Logout servlet, which calls session.invalidate() to logout the user, and redirects to the Login servlet.
All servlets other than the Login servlet should check for authentication via the session variable before doing any other processing, and should redirect to the login servlet in case the user is not logged in.

Submit a zip or tar file containing all the files that you have created.  

Make sure to name the directory by your roll number, so expanding the files will create separate folders for different students.  
Make sure the database host, name, password etc are defined only once in static variables so your TAs can easily change them to test your program.  

Preliminary to the assignment:  Read up about sequences and the serial type in PostgreSQL from:
   https://www.postgresql.org/docs/10/static/sql-createsequence.html
Read the Examples section first, before reading the earlier part of this page.

Your goal is to implement a simple Whatsapp-like application WhatASap. To this end, you do the following:

Write a script create.sql to create tables. The schema is described below.
create table users(
    uid varchar(10) primary key, 
    name varchar(20), 
    phone varchar(10));
create table conversations(
     uid1 varchar(10) references users, 
     uid2 varchar(10) references users, 
     thread_id serial, 
     primary key (uid1, uid2),
     unique(thread_id),  
     check (uid1 < uid2));. 
Note 1: Since a conversation is shared between two users and should not depend on the order in which the uids appear, ensure uid1 < uid2 by swapping the IDs if they are not in ascending order. 
Note 2: thread_id is defined as type serial, which creates a new value for each tuple that is inserted into conversations.
create table posts (
    post_id serial primary key,
    thread_id integer references conversations(thread_id),
    uid varchar(10) references users,
    timestamp timestamp,
    text varchar(256)
);
Also fill in data for user and follows to demonstrate the interfaces described below.  Create a file data.sql with insert statements for sample data.
You can use auto increment annotations or sequences, instead of the “serial” type fields, if you want.  
When a user logs in (use the login code from the inclass assignment), they are directed to a home page which is defined as below.

The home page displays:

A form to create new conversations, which takes in a user ID and invokes a servlet createConversation, which creates a new conversation. Assume for simplicity that all users present in the users table are automatically registered on WhatASap.   When a user name ID is input, a new conversation is created with that user (if it does not already exist). A confirmation/error message is displayed, along with a link to go back to the home page.

Display an entry for each of the user’s conversations, along with the other user’s name, last message (if any) in that conversation, and its timestamp.  Conversations can be displayed with most recent first; make sure nulls (conversations without any messages) are sorted last. 
Each entry should also have a link  to show ConversationDetails as described below, with threadid as a GET parameter.

ConversationDetails: A servlet that displays all the messages in the conversation passed as GET parameter, sorted by their timestamp in decreasing order. The servlet also contains a form to create a new message, by invoking a NewMessage servlet.  The Servlet should check that the user is part of the conversation.

The New Message servlet posts the submitted message to the conversation.  Upon sucessful submit, the servlet redirects back to the ConversationDetails servlet, which shows the conversation updated with the new message.

Again, make sure that all servlets other than the Login servlet should check for authentication via the session variable before doing any other processing, and should redirect to the login servlet in case the user is not logged in.
Bonus:  (not required, do it only if you want, can compensate for marks lost elsewhere, but marks will not exceed 100% in any case)
Remember the last message in a conversation that was displayed, and show the list at that point.  To do so, make your display of messages as table with a scroll bar, and use the following javascript code to scroll to the desired message:

<head> <style>
    .scroll tbody { display:block; height:200px;  overflow:auto;}
</style>  <script>

    window.onload = function() {
       document.getElementById("50").scrollIntoView();
    };
</script>

</head>

<table class="scroll"> 
....
<tr id=50> ... </tr>
....
</table>

